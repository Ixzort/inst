from services.instagram_scraper import InstagramScraperService
from services.image_processor import ImageProcessorService
from services.database_service import DatabaseService
from utils.helpers import URLHelper, DataValidator

class InstagramAnalyzer:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ Instagram –ø—Ä–æ—Ñ–∏–ª—è"""

    def __init__(self):
        self.scraper = InstagramScraperService()
        self.image_processor = ImageProcessorService()
        self.database = DatabaseService()

    def process_username(self, username: str):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ username Instagram
        Args:
            username: username –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ Instagram –ø—Ä–æ—Ñ–∏–ª—è: @{username}")

        # –°–±–æ—Ä–∫–∞ URL –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ username
        profile_url = f"https://www.instagram.com/{username}/"
        print(f"üîó –ü–æ—Å—Ç—Ä–æ–µ–Ω URL: {profile_url}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not URLHelper.validate_instagram_url(profile_url):
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∏–ª–∏ —Å—Å—ã–ª–∫–∞.")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Apify
        raw_data = self.scraper.fetch_posts([profile_url], limit=10)
        if not raw_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ (–æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é)
        processed_count = 0

        for item in raw_data:
            try:
                if not self._validate_raw_data(item):
                    continue

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                profile = self.scraper.parse_profile_data(item)
                profile_id = self.database.save_profile(profile)
                if not profile_id:
                    continue

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
                post = self.scraper.parse_post_data(item, profile_id)
                post_id = self.database.save_post(post)
                if not post_id:
                    continue

                # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if DataValidator.is_valid_image_url(post.display_url):
                    description_text = self.image_processor.analyze_image(post.display_url)
                    if description_text:
                        from models.data_models import PhotoDescription
                        description = PhotoDescription(
                            post_id=post_id,
                            description=description_text
                        )
                        self.database.save_photo_description(description)

                processed_count += 1
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞–ø–∏—Å—å {processed_count}/{len(raw_data)}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {e}")
                continue

        # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._show_statistics()
        print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} –∑–∞–ø–∏—Å–µ–π")

    def _validate_raw_data(self, item: dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç Apify"""
        required_fields = ['username', 'displayUrl']
        return all(item.get(field) for field in required_fields)

    def _show_statistics(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        stats = self.database.get_statistics()
        if stats:
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   –ü—Ä–æ—Ñ–∏–ª–µ–π: {stats.get('profiles', 0)}")
            print(f"   –ü–æ—Å—Ç–æ–≤: {stats.get('posts', 0)}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–π: {stats.get('descriptions', 0)}")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    username = "hello__marusya"  # —Å—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤—å –Ω—É–∂–Ω—ã–π username
    analyzer = InstagramAnalyzer()
    analyzer.process_username(username)

if __name__ == "__main__":
    main()
