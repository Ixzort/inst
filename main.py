from services.instagram_scraper import InstagramScraperService
from services.image_processor import ImageProcessorService
from services.database_service import DatabaseService
from utils.helpers import DataValidator
from models.data_models import InstagramProfile, PhotoDescription
from config.database import DatabaseConfig
import argparse

class InstagramAnalyzer:
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ Instagram –ø—Ä–æ—Ñ–∏–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–ø–∏—Å–∞–Ω–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    def __init__(self):
        self.scraper = InstagramScraperService()
        self.image_processor = ImageProcessorService()
        self.database = DatabaseService()

    def process_username(self, username: str, limit: int = 5):
        print(f"üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: @{username}")

        raw_data = self.scraper.fetch_posts(username, limit)
        if not raw_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return

        profile = InstagramProfile(username=username, followers=0)
        profile_id = self.database.save_profile(profile)
        if not profile_id:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
            return

        processed = 0
        for item in raw_data:
            try:
                post = self.scraper.parse_post_data(item, profile_id)
                post_id = self.database.save_post(post)
                if not post_id:
                    continue
                processed += 1
                print(f"‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω {processed}/{len(raw_data)}")
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞:", e)

        self.process_new_descriptions(profile_id)

        # --- –®–∞–≥ 3: —Ñ–æ—Ä–º–∏—Ä—É–µ–º data + –ø–æ—Ä—Ç—Ä–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è ---
        items = self.database.get_posts_with_descriptions(profile_id)
        lines = []
        for idx, it in enumerate(items, 1):
            ts = it['timestamp'].isoformat() if it['timestamp'] else "N/A"
            lines.append(f"{idx}) –§–æ—Ç–æ {idx}")
            lines.append(ts)
            lines.append(it['caption'] or "")
            lines.append(it['description'] or "")
        profile_data = "\n".join(lines)
        print(f"[DATA] profile_data:\n{profile_data}")

        porter_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å @{username} –ø–æ –¥–∞–Ω–Ω—ã–º:
{profile_data}

–°–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç, –ª–æ–∫–∞—Ü–∏—è, —Å–µ–º—å—è
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã, —Å—Ç–∏–ª—å, —Ö–∞—Ä–∞–∫—Ç–µ—Ä
‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ –æ–±—â–µ–Ω–∏—é, 
‚Ä¢ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
"""
        resp = self.image_processor.openai_client.chat.completions.create(
            model=self.image_processor.model,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å–æ—Ü—Å–µ—Ç–µ–π, –¥–µ–ª–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."},
                {"role": "user", "content": porter_prompt}
            ],
            max_tokens=300,
            temperature=0.5
        )
        porter_text = resp.choices[0].message.content
        print(f"[PORTER] porter_text:\n{porter_text}")

        conn = DatabaseConfig.get_connection()
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE instagram_profile SET data = %s, portret = %s WHERE profile_id = %s",
            (profile_data, porter_text, profile_id)
        )
        conn.commit()
        conn.close()
        print("‚úÖ –ü–æ–ª—è data –∏ portret –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ instagram_profile")

        stats = self.database.get_statistics()
        print(f"\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {processed}")
        print(f"üìä –°–≤–æ–¥–∫–∞ ‚Äî –ü—Ä–æ—Ñ–∏–ª–µ–π: {stats['profiles']}, –ü–æ—Å—Ç–æ–≤: {stats['posts']}, –û–ø–∏—Å–∞–Ω–∏–π: {stats['descriptions']}")

    def process_new_descriptions(self, profile_id: int):
        print(f"\nüìå –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è ID = {profile_id}")
        posts = self.database.get_posts_without_description_for_profile(profile_id)
        print(f"[NEW_DESC] –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è: {len(posts)}, –¥–µ—Ç–∞–ª–∏: {posts}")

        if not posts:
            print("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è.")
            return

        for item in posts:
            post_id = item['post_id']
            url = item['display_url']
            print(f"[NEW_DESC] –ü–æ–ø—ã—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞ {post_id}, URL={url}")

            if not DataValidator.is_valid_image_url(url):
                print(f"[NEW_DESC] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {url}")
                continue

            desc_text = self.image_processor.analyze_image(url)
            if not desc_text:
                print(f"[NEW_DESC] –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç {post_id}")
                continue

            description = PhotoDescription(post_id=post_id, profile_id=profile_id, description=desc_text)
            print(f"[NEW_DESC] –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è post_id={post_id}")
            self.database.save_photo_description(description)

        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã!")



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("username", help="Instagram username")
    parser.add_argument("--limit", type=int, default=3)
    args = parser.parse_args()

    analyzer = InstagramAnalyzer()
    analyzer.process_username(args.username, limit=args.limit)

if __name__ == "__main__":
    main()





