from typing import Optional, List
from config.database import DatabaseConfig
from models.data_models import InstagramProfile, InstagramPost, PhotoDescription


class DatabaseService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""

    def save_profile(self, profile: InstagramProfile) -> Optional[int]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        Args:
            profile: –û–±—ä–µ–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è Instagram

        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ/—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        """
        conn = None
        try:
            conn = DatabaseConfig.get_connection()
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            cursor.execute(
                "SELECT id FROM profiles WHERE username = %s",
                (profile.username,)
            )
            existing_profile = cursor.fetchone()

            if existing_profile:
                print(f"üìã –ü—Ä–æ—Ñ–∏–ª—å @{profile.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_profile[0]})")
                return existing_profile[0]

            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            cursor.execute(
                """INSERT INTO profiles (username, followers) 
                   VALUES (%s, %s) RETURNING id""",
                (profile.username, profile.followers)
            )

            profile_id = cursor.fetchone()[0]
            conn.commit()
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å @{profile.username} —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å ID: {profile_id}")
            return profile_id

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            if conn:
                conn.rollback()
            return None
        finally:
            if conn:
                conn.close()

    def save_post(self, post: InstagramPost) -> Optional[int]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        Args:
            post: –û–±—ä–µ–∫—Ç –ø–æ—Å—Ç–∞ Instagram

        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        """
        conn = None
        try:
            conn = DatabaseConfig.get_connection()
            cursor = conn.cursor()

            cursor.execute(
                """INSERT INTO posts (profile_id, display_url, caption, timestamp) 
                   VALUES (%s, %s, %s, %s) RETURNING id""",
                (post.profile_id, post.display_url, post.caption, post.timestamp)
            )

            post_id = cursor.fetchone()[0]
            conn.commit()
            print(f"‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å ID: {post_id}")
            return post_id

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            if conn:
                conn.rollback()
            return None
        finally:
            if conn:
                conn.close()

    def save_photo_description(self, description: PhotoDescription) -> Optional[int]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

        Args:
            description: –û–±—ä–µ–∫—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        """
        conn = None
        try:
            conn = DatabaseConfig.get_connection()
            cursor = conn.cursor()

            cursor.execute(
                """INSERT INTO photo_descriptions (post_id, description) 
                   VALUES (%s, %s) RETURNING id""",
                (description.post_id, description.description)
            )

            description_id = cursor.fetchone()[0]
            conn.commit()
            print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ—Å—Ç–∞ ID: {description.post_id}")
            return description_id

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            if conn:
                conn.rollback()
            return None
        finally:
            if conn:
                conn.close()

    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = None
        try:
            conn = DatabaseConfig.get_dict_connection()
            cursor = conn.cursor()

            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
            stats = {}

            cursor.execute("SELECT COUNT(*) as count FROM profiles")
            stats['profiles'] = cursor.fetchone()['count']

            cursor.execute("SELECT COUNT(*) as count FROM posts")
            stats['posts'] = cursor.fetchone()['count']

            cursor.execute("SELECT COUNT(*) as count FROM photo_descriptions")
            stats['descriptions'] = cursor.fetchone()['count']

            return stats

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
        finally:
            if conn:
                conn.close()
